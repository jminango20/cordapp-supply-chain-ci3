apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    compile project(":cordapp-contracts-states")
    compile project(":cordapp")

    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"

    compile "net.corda:corda-jackson:$corda_release_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

springBoot {
    mainClassName = "com.supplychain.webserver.ServerKt"
}

task runTemplateClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.supplychain.ClientKt'
    args 'localhost:10006', 'user1', 'test'
}

task runWebServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.supplychain.webserver.ServerKt'
}
